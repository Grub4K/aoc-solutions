from typing import Iterable, Literal, TypeVar, overload

T = TypeVar("T")
U = TypeVar("U")

@overload
def nwise(iterable: Iterable[T], n: Literal[2]) -> Iterable[tuple[T, T]]: ...
@overload
def nwise(iterable: Iterable[T], n: Literal[3]) -> Iterable[tuple[T, T, T]]: ...
@overload
def nwise(iterable: Iterable[T], n: Literal[4]) -> Iterable[tuple[T, T, T, T]]: ...
@overload
def nwise(iterable: Iterable[T], n: Literal[5]) -> Iterable[tuple[T, T, T, T, T]]: ...
@overload
def nwise(
    iterable: Iterable[T], n: Literal[6]
) -> Iterable[tuple[T, T, T, T, T, T]]: ...
@overload
def nwise(iterable: Iterable[T], n: int) -> Iterable[tuple[T, ...]]: ...
@overload
def first(iterable: Iterable[T]) -> T: ...
@overload
def first(iterable: Iterable[T], default: U) -> T | U: ...
@overload
def grouped(iterable: Iterable[T], n: Literal[2]) -> Iterable[tuple[T, T]]: ...
@overload
def grouped(iterable: Iterable[T], n: Literal[3]) -> Iterable[tuple[T, T, T]]: ...
@overload
def grouped(iterable: Iterable[T], n: Literal[4]) -> Iterable[tuple[T, T, T, T]]: ...
@overload
def grouped(iterable: Iterable[T], n: Literal[5]) -> Iterable[tuple[T, T, T, T, T]]: ...
@overload
def grouped(
    iterable: Iterable[T], n: Literal[6]
) -> Iterable[tuple[T, T, T, T, T, T]]: ...
@overload
def grouped(iterable: Iterable[T], n: int) -> Iterable[tuple[T]]: ...
def flatten(iterable: Iterable[Iterable[T]]) -> Iterable[T]: ...
